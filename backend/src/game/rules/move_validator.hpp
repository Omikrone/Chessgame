// move_validator.hpp

#pragma once

#include "game/components/move.hpp"
#include "game/pieces/piece.hpp"
#include "game/board/board.hpp"
#include "game/rules/move_generator.hpp"
#include "game/game_history.hpp"

#include <vector>


/**
 * @brief Class representing the rules of a chess game.
 *
 * Manages the validation of moves requested by the players.
 */
class MoveValidator
{
    private:
        GameBoard& _board;

        GameHistory& _history;

        /**
         * @brief Checks if the kingside castle is possible.
         *
         * @param king King requesting the castle.
         * @param enemyPossibleMoves Vector of the legal moves that can be played by the other player.
         * @return true if the castle is legal, else false.
         */
        bool check_kingside_castle(Piece *king, std::vector<Move>& enemyPossibleMoves);
    
        /**
         * @brief Checks if the queenside castle is possible.
         *
         * @param king King requesting the castle.
         * @param enemyPossibleMoves Vector of the legal moves that can be played by the other player.
         * @return true if the castle is legal, else false.
         */
        bool check_queenside_castle(Piece *king, std::vector<Move>& enemyPossibleMoves);

        /**
         * @brief Filters the EnPassant moves based on the rules.
         *
         * @param possibleMoves Vector of the raw moves generated by MoveGenerator.
         * @param side Color of the current player. 
         * @return Another vector of the moves with the EnPassant filtered.
         */
        std::vector<Move> filter_enpassant_moves(std::vector<Move>& possibleMoves, Color side);

        /**
         * @brief Filters the castle moves based on the rules.
         *
         * @param possibleMoves Vector of the raw moves generated by MoveGenerator.
         * @param side Color of the current player. 
         * @return Another vector of the moves with the castle moves filtered.
         */
        std::vector<Move> filter_castle_moves(std::vector<Move>& possibleMoves, Color side);

        /**
         * @brief Filters the moves that leaves the king in check.
         *
         * @param possibleMoves Vector of the raw moves generated by MoveGenerator.
         * @param side Color of the current player. 
         * @return Another vector of the moves with the check moves filtered.
         */
        std::vector<Move> filter_check_moves(std::vector<Move>& possibleMoves, Color side);

    public:

        MoveValidator(GameBoard& board, GameHistory& history);

        ~MoveValidator() = default;

        /**
         * @brief Filters the legal moves generated by the MoveGenerator based on the chess rules.
         *
         * @param rawPossibleMoves Vector of the raw moves generated by MoveGenerator.
         * @param side Color of the current player. 
         * @return Another vector of the moves with the legal moves filtered.
         */
        std::vector<Move> filter_legal_moves(std::vector<Move>& rawPossibleMoves, Color side);
};